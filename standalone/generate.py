import os

from cryptography.fernet import Fernet
from dotenv import load_dotenv

from mergecal.standalone import calendar, logger
from io import StringIO
import pandas as pd

from mergecal.standalone.calendar import Source, CalendarMerger


def encrypt_calendars(filename: str, encryption_key=None) -> None:
    """
    Encrypts the file given by `filename` with the provided `encryption_kay` if provided. Else generates a random
    key, stores it in "Fkey" and encrypts the file.

    The encrypted file is stored in `filename`.enc
    """
    with open(filename, "r") as f:
        data = f.read()

    if encryption_key is None:
        encryption_key = Fernet.generate_key()
        with open("Fkey", "bw") as f:
            f.write(encryption_key)

    fernet = Fernet(encryption_key)
    encMessage = fernet.encrypt(data.encode())

    with open(filename + '.enc', "bw") as f:
        f.write(encMessage)


# Retrieves encryption kay from environment variable
load_dotenv()
key = os.getenv("ENCRYPTION_KEY", None)
if key is not None:
    key = bytes(key, 'utf-8')

calendar_config_file = 'calendars.csv'
calendar_name = 'Bart'

if __name__ == '__main__':

    # Create a new empty calendar
    cal = calendar.Calendar(calendar_name)

    # If known encryption key, read encrypted list of calendar sources
    if key:
        f = Fernet(key)
        # opening the original file to decrypt
        with open(calendar_config_file + '.enc', 'rb') as file:
            DATA = file.read()
        DATA = f.decrypt(DATA).decode()
        logger.debug('Data have been Decrypted')
    else:
        # encrypt the original file
        encrypt_calendars(calendar_config_file)

        with open(calendar_config_file, 'r') as file:
            DATA = file.read()

        # delete the original file (keeping the encrypted copy generated by `encrypt_calendars()`
        os.unlink(calendar_config_file)

    # Create a pandas dataframe with the data
    DATA = StringIO(DATA)
    df = pd.read_csv(DATA)

    # Iterate over calendar sources and add them to calendar
    for _, source_params in df.iterrows():
        p = source_params.to_dict()
        s = Source(**p)
        logger.debug(f'{s.name} is {s.caltype} {s.include_description}')
        cal.addSource(s)

    # Read all sources and merge them to ICal string
    c = CalendarMerger(cal).merge()

    # Save ICal string to file
    with open(f'{calendar_name}.ics', 'w') as f:
        f.write(c)
