import argparse
import os
import hashlib

from cryptography.fernet import Fernet, InvalidToken
from dotenv import load_dotenv

from mergecal.standalone import calendar, logger
from io import StringIO
import pandas as pd

from mergecal.standalone.calendar import Source, CalendarMerger


def encrypt_calendars(filename: str, encryption_key=None) -> str:
    """
    Encrypts the file given by `filename` with the provided `encryption_kay` if provided. Else generates a random
    key, stores it in "Fkey" and encrypts the file.

    The encrypted file is stored in "`filename`.enc"
    """
    global key_file

    with open(filename, "r") as f:
        data = f.read()

    if encryption_key is None:
        encryption_key = Fernet.generate_key()
        with open(key_file, "bw") as f:
            f.write(encryption_key)

    fernet = Fernet(encryption_key)
    encMessage = fernet.encrypt(data.encode())

    with open(filename + '.enc', "bw") as f:
        f.write(encMessage)

    return data

# Retrieves encryption kay from environment variable
load_dotenv()
key = os.getenv("ENCRYPTION_KEY", None)
if key is not None:
    key = bytes(key, 'utf-8')

calendar_config_file = 'calendars.csv'
calendar_name = 'MyCalendar'
version_number = '1.1'

if __name__ == '__main__':

    '''
    Input arguments:
        --input_file (-in)
        --encryption_key_fle (-key)
        --calendar_name (-cname)
        --include_past (-p)
    '''
    parser = argparse.ArgumentParser(prog="generate",
                                     description=f'Generates an .ics file of merged calendar sources (version {version_number})')
    parser.add_argument("--input_file", "-in", metavar='in', type=str, nargs=1,
                        help=f'input .csv file all calendars to merge' \
                            f' (defaults to "{calendar_config_file}" if none specified)', default=[calendar_config_file])
    parser.add_argument("--encryption_key_file", "-key", metavar='key', type=str, nargs=1,
                        help='output file for generated encryption key (defaults to "Fkey" if non specified)',
                        default=['Fkey'])
    parser.add_argument("--calendar_name", "-cname", metavar='cname', type=str, nargs='?',
                        help=f'Calendar name (defaults to "{calendar_name}" if non specified)',
                        default=calendar_name)
    parser.add_argument('--include_past', '-p', metavar='past', type=bool, action=argparse.BooleanOptionalAction)

    args = parser.parse_args()

    # Reset default directories if adequate arguments are provided
    calendar_name = args.calendar_name
    calendar_config_file = args.input_file[0]
    key_file = args.encryption_key_file[0]

    # Create a new empty calendar
    cal = calendar.Calendar(calendar_name)

    # If known encryption key, read encrypted list of calendar sources
    if key and os.path.isfile(calendar_config_file + '.enc'):
        f = Fernet(key)
        # opening the original file to decrypt
        with open(calendar_config_file + '.enc', 'rb') as file:
            DATA = file.read()

        try:
            DATA = f.decrypt(DATA).decode()
        except InvalidToken:
            exit("Invalid encryption key")

        logger.debug('Data have been Decrypted')
    else:
        # encrypt the original file
        DATA = encrypt_calendars(calendar_config_file, key)

        # delete the original file (keeping the encrypted copy generated by `encrypt_calendars()`
        os.unlink(calendar_config_file)

    output_filename = hashlib.md5(DATA.encode('utf-8')).hexdigest()

    # Create a pandas dataframe with the data
    DATA = StringIO(DATA)
    df = pd.read_csv(DATA)
    df['custom_prefix'] = df['custom_prefix'].fillna('')

    # Iterate over calendar sources and add them to calendar
    for _, source_params in df.iterrows():
        p = source_params.to_dict()
        s = Source(**p)
        logger.debug(f'{s.name} is {s.caltype} {s.include_description}')
        cal.addSource(s)

    # Read all sources and merge them to ICal string
    c = CalendarMerger(cal).merge(include_past=args.include_past)

    # Save ICal string to file
    with open(f'{calendar_name}_{output_filename}.ics', 'w') as f:
        f.write(c)
