import os

from cryptography.fernet import Fernet
from dotenv import load_dotenv

from mergecal.standalone import calendar, logger
from io import StringIO
import pandas as pd

from mergecal.standalone.calendar import Source, CalendarMerger

def encrypt_calendars(filename: str, encryption_key=None):

    with open(filename,"r") as f:
        cal = f.read()

    if encryption_key is None:
        encryption_key = Fernet.generate_key()
        with open("Fkey","bw") as f:
            f.write(encryption_key)

    fernet = Fernet(encryption_key)
    encMessage = fernet.encrypt(cal.encode())

    with open(filename+'.enc', "bw") as f:
        f.write(encMessage)


load_dotenv()
key = os.getenv("ENCRYPTION_KEY", None)
if key is not None:
    key=bytes(key,'utf-8')

calendar_config_file = 'calendars.csv'

if __name__ == '__main__':

    cal = calendar.Calendar("Bart")

    if key:
        f = Fernet(key)
        # opening the original file to decrypt
        with open(calendar_config_file+'.enc', 'rb') as file:
            DATA = file.read()
        DATA = f.decrypt(DATA).decode()
        logger.debug('Data have been Decrypted')
    else:
        # encrypt the original file
        encrypt_calendars(calendar_config_file)

        with open(calendar_config_file, 'r') as file:
            DATA = file.read()

        # delete the original file (keeping the encrypted copy generated by `encrypt_calendars()`

    DATA = StringIO(DATA)

    # Makes a panda dataframe with the data
    df = pd.read_csv(DATA)

    for _, source_params in df.iterrows():
        p = source_params.to_dict()
        s = Source(**p)
        logger.debug(f'{s._name} is {s._caltype} {s.include_description}')
        cal.addSource(s)

    c = CalendarMerger(cal).merge()
    print(c)
